#########################################################################################################################################
# Parallel null model using a SOCK cluster archictecture 
#########################################################################################################################################
# Example used: phylogenetic beta diversity
# For this example we will compute the phylogenetic beta diversity (SOR) and its turnover (SIM) and nested (SNE) components using 
# Baselga (2012)'s method extended method for phylogenetic community data. The data to run the example was obtained from Pavoine (2016):
# (http://www.oikosjournal.org/appendix/oik-03262). 

# References: 

# Baselga A. (2012) The relationship between species replacement, dissimilarity derived from nestedness,
# and nestedness. Global Ecology and Biogeography 21, 1223-1232

# Leprieur F, Albouy C, De Bortoli J, Cowman PF, Bellwood DR, et al. (2012) Quantifying Phylogenetic
# Beta Diversity: Distinguishing between "True" Turnover of Lineages and Phylogenetic
# Diversity Gradients. PLoS ONE 7(8): e42760. doi:10.1371/journal.pone.0042760

# Pavoine, S. 2016. A guide through a family of phylogenetic dissimilarity measures among sites. Oikos, 125(12): 1719-1732.

# SOCK Cluster can be used on Linux, Windows or OX. However, this script was only tested on Windows and Linux. 
#########################################################################################################################################
# Code written by Renato Henriques-Silva

# Copyright GPL-2 2012 Renato Henriques-Silva
# http://www.gnu.org/licenses/gpl-2.0.txt
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
############################################################################################################################################

# load packages
require(betapart)
require(ape)
require(doParallel)

# load data
# community data
urlfile_comm <- 'https://raw.githubusercontent.com/RenatoHS/parallel_null_modelling/master/data/presence-data.txt'
comm <- read.table(urlfile_comm, head=TRUE)

# phylogenetic data
urlfile_phylo <- 'https://raw.githubusercontent.com/RenatoHS/parallel_null_modelling/master/data/tree.txt'
tree<-read.tree(urlfile_phylo)
tree<-root(tree, 1, r=TRUE)
# transform community data into presence-absence
comm<-ifelse(comm>0, 1, 0)

# compute observed phylogenetic indices
obs.phy <- phylo.beta.pair(comm, tree, index.family="sorensen")

# number of possible pairs of sites
pairs <- combn(nrow(comm),2)

# create strings for each pair of site
pair_names<-NULL
for (i in 1:ncol(pairs)){
  
  pair_id <- paste(attr(obs.phy$phylo.beta.sim, "Labels")[pairs[1,i]],
                   attr(obs.phy$phylo.beta.sim, "Labels")[pairs[2,i]], sep="-")
  pair_names<-c(pair_names, pair_id) 
}

# transform functional.beta.pair results into a matrix
obs.phy <- do.call(rbind, lapply(obs.phy, function(x) c(x)))

# set names for each pair of site using the set of strings created previsouly
colnames(obs.phy) <- pair_names

# numper of permutations of the null model
nperm <- 100

# number of cores 
nc <- 4

# make cluster & export variables to cores
cl <- parallel::makeCluster(nc)
doParallel::registerDoParallel(cl) 
parallel::clusterExport(cl = cl, c("nperm","nc","comm","tree"), envir = environment())

# run parallel for loop
res.phylo <- foreach(1:nc, .combine = c, .packages=c("ape","betapart","picante")) %dopar% {
  
  nt <- nperm/nc
  
  mat <- replicate(nt, NULL, simplify = FALSE)
  
  for (i in 1:nt){
    
    temp.comm <-randomizeMatrix(comm, null.model = "richness",iterations = 1000)
    
    mat[[i]] <- phylo.beta.pair(temp.comm, tree, index.family="sorensen")
    
  }
  mat
}

#transform results into matrices
null.phylo<- lapply(res.phylo, function(x) do.call(rbind,lapply(x, function(x) c(x))))

#compute mean, standard deviation and p-values using null distribution
mean.null.phy <-matrix(numeric(),ncol=ncol(obs.phy),nrow=nrow(obs.phy))
sd.null.phy <-matrix(numeric(),ncol=ncol(obs.phy),nrow=nrow(obs.phy))
p.phy<-matrix(numeric(),ncol=ncol(obs.phy),nrow=nrow(obs.phy))

#for each one of the 3 null dissimilarity metrics (SIN, SNE and SOR) 
for (j in 1:nrow(obs.phy)){
  
  #for each pair of sites
  for (i in 1:ncol(obs.phy)){
    
    # group the null values from each metric of each pair of site into into it's own matrix
    null.phylo.temp <- do.call(rbind, lapply(null.phylo, `[`,j,i)) 
    
    # compute mean of all null values from this pair of site
    mean.null.phy[j,i] <- mean(null.phylo.temp)
    # compute standard deviation of all null values from this pair of site
    sd.null.phy[j,i] <- sd(null.phylo.temp)
    
    # compute the p-values from this pair of site
    p.phy[j,i] <- (length(which(obs.phy[j,i] < null.phylo.temp)) + 1)/nperm
    #the +1 is to take into account that the observed value is one of the possibilities
  }
}

#compute standardized effect sizes (SES)
ses.phy <- (obs.phy - mean.null.phy)/sd.null.phy

#group all results
res.phy <- as.data.frame(matrix(numeric(), ncol = 9, nrow = ncol(obs.phy),
                                dimnames = list(pair_names, c("obs.SIM","ses.SIM","p.SIM","obs.SNE","ses.SNE","p.SNE","obs.SOR","ses.SOR","p.SOR"))))

res.phy$obs.SIM <- obs.phy[1,]
res.phy$obs.SNE <- obs.phy[2,]
res.phy$obs.SOR <- obs.phy[3,]

res.phy$ses.SIM <- ses.phy[1,]
res.phy$ses.SNE <- ses.phy[2,]
res.phy$ses.SOR <- ses.phy[3,]

res.phy$p.SIM <- p.phy[1,]
res.phy$p.SNE <- p.phy[2,]
res.phy$p.SOR <- p.phy[3,]

res.phy
